import streamlit as st
import pandas as pd


def show_main_interface():
    st.title("üìÑ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–û–°–¢")
    st.write("""
    **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã:**
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢
    - –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    - –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∞–≤—Ç–æ—Ä—É
    """)


def show_dataset_analysis(df):
    st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    total_docs = len(df)
    compliant_docs = df['–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢'].sum()

    st.write(f"üìÇ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
    st.write(f"‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢: {compliant_docs} ({compliant_docs / total_docs * 100:.1f}%)")
    st.write(f"‚ùå –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢: {total_docs - compliant_docs} ({(1 - compliant_docs / total_docs) * 100:.1f}%)")


def show_model_metrics(metrics):
    st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
    cols = st.columns(4)
    cols[0].metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{metrics['accuracy'] * 100:.1f}%")
    cols[1].metric("Precision", f"{metrics['precision'] * 100:.1f}%")
    cols[2].metric("Recall", f"{metrics['recall'] * 100:.1f}%")
    cols[3].metric("AUC-ROC", f"{metrics['auc']:.3f}")


def show_error_analysis(analysis):
    st.write("\nüîù –¢–æ–ø-5 –æ—à–∏–±–æ–∫:")
    for error, count in analysis['error_counts'][:5]:
        st.write(f"- {error}: {count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ({count / analysis['total_docs'] * 100:.1f}%)")


def show_author_search(df):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∞–≤—Ç–æ—Ä—É"""
    st.subheader("üë§ –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É")

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    author_name = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∞–≤—Ç–æ—Ä–∞:",
        key="author_search",
        help="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞"
    )

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ (—á—Ç–æ–±—ã –Ω–µ –∏—Å–∫–∞—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞)
    if st.button("–ù–∞–π—Ç–∏") or author_name:
        if not author_name or len(author_name.strip()) < 2:
            st.warning("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return

        with st.spinner("–ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∞..."):
            author_analysis = analyze_author(df, author_name)

        if author_analysis:
            st.success(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {author_analysis['total_docs']}")

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ì–û–°–¢—É
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢",
                          f"{author_analysis['compliant_docs']}",
                          f"{author_analysis['compliance_rate']:.1f}%")
            with col2:
                st.metric("–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç",
                          f"{author_analysis['total_docs'] - author_analysis['compliant_docs']}",
                          f"{100 - author_analysis['compliance_rate']:.1f}%",
                          delta_color="off")

            # –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
            if author_analysis['author_errors']:
                st.subheader("–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö:")
                for error, count in author_analysis['author_errors']:
                    st.write(f"‚ñ™Ô∏è {error} ‚Äî {count} –¥–æ–∫—É–º–µ–Ω—Ç(–æ–≤)")

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫
                errors_df = pd.DataFrame(author_analysis['author_errors'],
                                         columns=['–û—à–∏–±–∫–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
                st.bar_chart(errors_df.set_index('–û—à–∏–±–∫–∞'))
            else:
                st.success("üéâ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ì–û–°–¢!")
        else:
            st.warning("–ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.info("üí° –°–æ–≤–µ—Ç: –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–≤–æ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é")


def show_document_checker():
    st.subheader("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    check_option = st.radio("–°–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏:",
                            ("–ó–∞–≥—Ä—É–∑–∏—Ç—å DOCX", "–†—É—á–Ω–æ–π –≤–≤–æ–¥"),
                            horizontal=True)

    if check_option == "–ó–∞–≥—Ä—É–∑–∏—Ç—å DOCX":
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç DOCX", type=["docx"])
        if uploaded_file is not None:
            st.warning("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ DOCX –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∫–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.")
    else:
        with st.form("manual_check_form"):
            st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")

            col1, col2 = st.columns(2)
            with col1:
                doc_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", value="–û—Ç—á–µ—Ç", key="doc_name")
                author = st.text_input("–ê–≤—Ç–æ—Ä", value="–ò–≤–∞–Ω–æ–≤ –ò.–ò.", key="author")
                date = st.text_input("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)", value="01.01.2023", key="date",
                                     help="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                font = st.selectbox("–®—Ä–∏—Ñ—Ç", options=['Times New Roman', 'Arial', 'Calibri'], key="font")
                font_size = st.number_input("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞", min_value=8, max_value=36, value=14, key="font_size")

            with col2:
                top_margin = st.number_input("–í–µ—Ä—Ö–Ω–µ–µ –ø–æ–ª–µ (—Å–º)", min_value=1.0, max_value=5.0, value=2.0,
                                             step=0.1, key="top_margin")
                bottom_margin = st.number_input("–ù–∏–∂–Ω–µ–µ –ø–æ–ª–µ (—Å–º)", min_value=1.0, max_value=5.0, value=2.0,
                                                step=0.1, key="bottom_margin")
                left_margin = st.number_input("–õ–µ–≤–æ–µ –ø–æ–ª–µ (—Å–º)", min_value=1.0, max_value=5.0, value=3.0,
                                              step=0.1, key="left_margin")
                right_margin = st.number_input("–ü—Ä–∞–≤–æ–µ –ø–æ–ª–µ (—Å–º)", min_value=1.0, max_value=5.0, value=1.0,
                                               step=0.1, key="right_margin")

            st.write("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
            line_spacing = st.number_input("–ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", min_value=0.5, max_value=2.0, value=1.5,
                                           step=0.1, key="line_spacing")
            paragraph_indent = st.number_input("–û—Ç—Å—Ç—É–ø –∞–±–∑–∞—Ü–∞ (—Å–º)", min_value=0.5, max_value=2.0, value=1.25,
                                               step=0.05, key="paragraph_indent")
            has_headers = st.checkbox("–ö–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã", value=True, key="has_headers")
            has_pagination = st.checkbox("–ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü", value=True, key="has_pagination")
            has_title_page = st.checkbox("–¢–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç", value=True, key="has_title_page")

            st.write("**–î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ì–û–°–¢**")
            col3, col4 = st.columns(2)
            with col3:
                correct_headers = st.checkbox("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ", value=True, key="correct_headers")
                correct_images = st.checkbox("–†–∏—Å—É–Ω–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ", value=True, key="correct_images")
                correct_links = st.checkbox("–°—Å—ã–ª–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ", value=True, key="correct_links")
                correct_tables = st.checkbox("–¢–∞–±–ª–∏—Ü—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ", value=True, key="correct_tables")
            with col4:
                correct_details = st.checkbox("–†–µ–∫–≤–∏–∑–∏—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ", value=True, key="correct_details")
                has_contents = st.checkbox("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏", value=True, key="has_contents")
                correct_lists = st.checkbox("–°–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ", value=True, key="correct_lists")
                correct_appendix = st.checkbox("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –≤–µ—Ä–Ω–æ", value=True, key="correct_appendix")

            submitted = st.form_submit_button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
            if submitted:
                st.session_state.submitted = True


def analyze_author(df, author_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∞ –∏ –≤—ã—è–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏"""
    if not author_name or len(author_name.strip()) < 2:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        return None

    try:
        # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        author_docs = df[df['–ê–≤—Ç–æ—Ä'].str.strip().str.lower() == author_name.strip().lower()]

        if author_docs.empty:
            return None

        total_docs = len(author_docs)
        compliant_docs = author_docs['–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢'].sum()

        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∞–≤—Ç–æ—Ä–∞
        error_list = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ì–û–°–¢—É –¥–æ–∫—É–º–µ–Ω—Ç—ã
        non_compliant = author_docs[author_docs['–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢'] == 0]

        if not non_compliant.empty:
            # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
            errors = {
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è': ((non_compliant['–í–µ—Ä—Ö–Ω–µ–µ –ø–æ–ª–µ (—Å–º)'] != 2.0) |
                                      (non_compliant['–ù–∏–∂–Ω–µ–µ –ø–æ–ª–µ (—Å–º)'] != 2.0) |
                                      (non_compliant['–õ–µ–≤–æ–µ –ø–æ–ª–µ (—Å–º)'] != 3.0) |
                                      (non_compliant['–ü—Ä–∞–≤–æ–µ –ø–æ–ª–µ (—Å–º)'] != 1.0)).sum(),
                '–ù–µ–≤–µ—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç': (non_compliant['–®—Ä–∏—Ñ—Ç'] != 'Times New Roman').sum(),
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã': (non_compliant['–û—Ç—Å—Ç—É–ø –∞–±–∑–∞—Ü–∞ (—Å–º)'] != 1.25).sum(),
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—è': (non_compliant['–ù–∞–ª–∏—á–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü'] == 0).sum(),
                '–û—à–∏–±–∫–∏ –≤ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–∞—Ö': (non_compliant['–ù–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–æ–≤'] == 0).sum(),
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏': (non_compliant['–í–µ—Ä–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏'] == 0).sum(),
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∏—Å—É–Ω–∫–∏': (non_compliant['–í–µ—Ä–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã —Ä–∏—Å—É–Ω–∫–∏'] == 0).sum(),
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏': (non_compliant['–í–µ—Ä–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏'] == 0).sum(),
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã': (non_compliant['–í–µ—Ä–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã'] == 0).sum(),
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã': (non_compliant['–í–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞'] == 0).sum()
            }

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è
            error_list = [(error, count) for error, count in errors.items() if count > 0]

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
            error_list.sort(key=lambda x: x[1], reverse=True)

        return {
            'total_docs': total_docs,
            'compliant_docs': compliant_docs,
            'compliance_rate': compliant_docs / total_docs * 100 if total_docs > 0 else 0,
            'author_errors': error_list
        }

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–≤—Ç–æ—Ä–∞: {str(e)}")
        return None
