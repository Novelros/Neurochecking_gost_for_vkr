import streamlit as st
import pandas as pd
import os
import numpy as np
from sklearn.model_selection import train_test_split
from models.model_utils import train_and_save_model, load_trained_components, preprocess_data
from views.ui import (
    show_main_interface,
    show_dataset_analysis,
    show_model_metrics,
    show_error_analysis,
    show_author_search,
    show_document_checker,
    show_training_analysis
)



def predict_compliance(input_data, model, scaler, label_encoder):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ì–û–°–¢ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    try:
        input_df = pd.DataFrame([input_data])

        if '–®—Ä–∏—Ñ—Ç' in input_df.columns:
            input_df['–®—Ä–∏—Ñ—Ç'] = label_encoder.transform(input_df['–®—Ä–∏—Ñ—Ç'])

        bool_cols = ['–ù–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–æ–≤', '–ù–∞–ª–∏—á–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü', '–ù–∞–ª–∏—á–∏–µ —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞']
        for col in bool_cols:
            if col in input_df.columns:
                input_df[col] = input_df[col].astype(int)

        scaled_data = scaler.transform(input_df)
        prediction = model.predict(scaled_data)
        return prediction[0][0]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {str(e)}")
        return None


def main():
    show_main_interface()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    datasets = {}
    default_df = pd.read_csv('data/default_dataset.csv')
    datasets['default'] = default_df

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π –¥–∞—Ç–∞—Å–µ—Ç (CSV)", type=["csv"])
    if uploaded_file is not None:
        try:
            custom_df = pd.read_csv(uploaded_file)
            datasets['custom'] = custom_df
            st.success("–î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    dataset_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                                  list(datasets.keys()))
    df = datasets[dataset_choice]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
    X, y, _ = preprocess_data(df)
    _, X_test, _, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

    # 2. –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    force_retrain = st.button("–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–µ–º –¥–∞—Ç–∞—Å–µ—Ç–µ")

    history_data = None
    model_exists = os.path.exists('models/trained_model/model.h5')

    # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å
    if force_retrain or not model_exists:
        with st.spinner("–ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."):
            model, scaler, label_encoder, history_data, _, _ = train_and_save_model(df)
        st.success("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
        model, scaler, label_encoder, history_data = load_trained_components()
        if model is not None:
            st.success("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
        else:
            # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±—É—á–∞–µ–º
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ...")
            with st.spinner("–ú–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è..."):
                model, scaler, label_encoder, history_data, _, _ = train_and_save_model(df)
            st.success("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

    if model:
        # –ú–µ—Ç—Ä–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞
        show_training_analysis(history_data, model, X_test, y_test, scaler)

    if 'metrics' not in st.session_state:
        X, y, _ = preprocess_data(df)
        X_scaled = scaler.transform(X)
        y_pred = (model.predict(X_scaled) > 0.5).astype(int)

        from sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score
        st.session_state.metrics = {
            'accuracy': accuracy_score(y, y_pred),
            'precision': precision_score(y, y_pred),
            'recall': recall_score(y, y_pred),
            'auc': roc_auc_score(y, y_pred)
        }

    show_model_metrics(st.session_state.metrics)
    show_dataset_analysis(df)

    error_counts = []
    if '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢' in df.columns:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ì–û–°–¢
        non_compliant = df[df['–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢'] == 0]
        total_non_compliant = len(non_compliant)

        if total_non_compliant > 0:
            # –°—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
            error_counts = [
                ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Ö–Ω–∏–µ –ø–æ–ª—è", (non_compliant['–í–µ—Ä—Ö–Ω–µ–µ –ø–æ–ª–µ (—Å–º)'] != 2.0).sum()),
                ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∏–∂–Ω–∏–µ –ø–æ–ª—è", (non_compliant['–ù–∏–∂–Ω–µ–µ –ø–æ–ª–µ (—Å–º)'] != 2.0).sum()),
                ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–µ–≤—ã–µ –ø–æ–ª—è", (non_compliant['–õ–µ–≤–æ–µ –ø–æ–ª–µ (—Å–º)'] != 3.0).sum()),
                ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤—ã–µ –ø–æ–ª—è", (non_compliant['–ü—Ä–∞–≤–æ–µ –ø–æ–ª–µ (—Å–º)'] != 1.0).sum()),
                ("–ù–µ–≤–µ—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç", (non_compliant['–®—Ä–∏—Ñ—Ç'] != 'Times New Roman').sum()),
                ("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã", (non_compliant['–û—Ç—Å—Ç—É–ø –∞–±–∑–∞—Ü–∞ (—Å–º)'] != 1.25).sum()),
                ("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—è", (non_compliant['–ù–∞–ª–∏—á–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü'] == 0).sum()),
                ("–û—à–∏–±–∫–∏ –≤ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–∞—Ö", (non_compliant['–ù–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–æ–≤'] == 0).sum())
            ]

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è
            error_counts = [err for err in error_counts if err[1] > 0]

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
            error_counts.sort(key=lambda x: x[1], reverse=True)

            # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –æ—à–∏–±–æ–∫
            error_counts = error_counts[:5]

    show_error_analysis({
        'error_counts': error_counts,
        'total_docs': len(df)
    })

    show_author_search(df)
    show_document_checker()

    if 'submitted' in st.session_state and st.session_state.submitted:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        try:
            date_dt = pd.to_datetime(st.session_state.date, format='%d.%m.%Y')
            days_since_2000 = (date_dt - pd.Timestamp('2000-01-01')).days
        except:
            days_since_2000 = 0

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        input_data = {
            '–®—Ä–∏—Ñ—Ç': st.session_state.font,
            '–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞': st.session_state.font_size,
            '–í–µ—Ä—Ö–Ω–µ–µ –ø–æ–ª–µ (—Å–º)': st.session_state.top_margin,
            '–ù–∏–∂–Ω–µ–µ –ø–æ–ª–µ (—Å–º)': st.session_state.bottom_margin,
            '–õ–µ–≤–æ–µ –ø–æ–ª–µ (—Å–º)': st.session_state.left_margin,
            '–ü—Ä–∞–≤–æ–µ –ø–æ–ª–µ (—Å–º)': st.session_state.right_margin,
            '–ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª': st.session_state.line_spacing,
            '–û—Ç—Å—Ç—É–ø –∞–±–∑–∞—Ü–∞ (—Å–º)': st.session_state.paragraph_indent,
            '–ù–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–æ–≤': int(st.session_state.has_headers),
            '–ù–∞–ª–∏—á–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü': int(st.session_state.has_pagination),
            '–ù–∞–ª–∏—á–∏–µ —Ç–∏—Ç—É–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞': int(st.session_state.has_title_page),
            '–í–µ—Ä–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏': int(st.session_state.correct_headers),
            '–ï—Å—Ç—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏': int(st.session_state.has_contents),
            '–í–µ—Ä–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏': int(st.session_state.correct_links),
            '–í–µ—Ä–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã': int(st.session_state.correct_tables),
            '–í–µ—Ä–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–µ–Ω—ã —Ä–∏—Å—É–Ω–∫–∏': int(st.session_state.correct_images),
            '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤': int(st.session_state.correct_lists),
            '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è': int(st.session_state.correct_appendix),
            '–í–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞': int(st.session_state.correct_details),
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': days_since_2000
        }

        compliance_prob = predict_compliance(input_data, model, scaler, label_encoder)

        if compliance_prob is not None:
            st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")
            col1, col2 = st.columns(2)

            with col1:
                st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ì–û–°–¢", f"{compliance_prob * 100:.1f}%")

                if compliance_prob > 0.7:
                    st.success("‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢")
                elif compliance_prob > 0.4:
                    st.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
                else:
                    st.error("‚ùå –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ì–û–°–¢")

            with col2:
                st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                if st.session_state.font != 'Times New Roman':
                    st.write("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à—Ä–∏—Ñ—Ç Times New Roman")
                if st.session_state.font_size != 14:
                    st.write(f"- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ 14 (—Ç–µ–∫—É—â–∏–π: {st.session_state.font_size})")
                if st.session_state.top_margin != 2.0:
                    st.write(f"- –í–µ—Ä—Ö–Ω–µ–µ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2.0 —Å–º (—Ç–µ–∫—É—â–µ–µ: {st.session_state.top_margin} —Å–º)")
                if st.session_state.bottom_margin != 2.0:
                    st.write(f"- –ù–∏–∂–Ω–µ–µ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2.0 —Å–º (—Ç–µ–∫—É—â–µ–µ: {st.session_state.bottom_margin} —Å–º)")
                if st.session_state.left_margin != 3.0:
                    st.write(f"- –õ–µ–≤–æ–µ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3.0 —Å–º (—Ç–µ–∫—É—â–µ–µ: {st.session_state.left_margin} —Å–º)")
                if st.session_state.right_margin != 1.0:
                    st.write(f"- –ü—Ä–∞–≤–æ–µ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1.0 —Å–º (—Ç–µ–∫—É—â–µ–µ: {st.session_state.right_margin} —Å–º)")
                if st.session_state.line_spacing != 1.5:
                    st.write(f"- –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1.5 (—Ç–µ–∫—É—â–∏–π: {st.session_state.line_spacing})")
                if st.session_state.paragraph_indent != 1.25:
                    st.write(f"- –û—Ç—Å—Ç—É–ø –∞–±–∑–∞—Ü–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1.25 —Å–º (—Ç–µ–∫—É—â–∏–π: {st.session_state.paragraph_indent} —Å–º)")
                if not st.session_state.has_headers:
                    st.write("- –î–æ–±–∞–≤—å—Ç–µ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã")
                if not st.session_state.has_pagination:
                    st.write("- –î–æ–±–∞–≤—å—Ç–µ –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü")
                if not st.session_state.has_title_page:
                    st.write("- –î–æ–±–∞–≤—å—Ç–µ —Ç–∏—Ç—É–ª—å–Ω—ã–π –ª–∏—Å—Ç")

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                st.write("\n**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–∫–∂–µ:**")
                st.write("- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
                st.write("- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–∏—Å—É–Ω–∫–æ–≤")
                st.write("- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫")
                st.write("- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∞–±–ª–∏—Ü —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ì–û–°–¢")
                st.write("- –ù–∞–ª–∏—á–∏–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                st.write("- –ù–∞–ª–∏—á–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏")
                st.write("- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –ø–æ –ì–û–°–¢—É")
                st.write("- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")


if __name__ == "__main__":
    main()